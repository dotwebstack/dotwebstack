@prefix elmo: <http://dotwebstack.org/def/elmo#>.
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>.
@prefix dc: <http://purl.org/dc/elements/1.1/>.
@prefix xsd: <http://www.w3.org/2001/XMLSchema#>.
@prefix foaf: <http://xmlns.com/foaf/0.1/>.
@prefix http: <http://www.w3.org/2011/http#>.

@prefix config: <http://dotwebstack.org/configuration/>.

#Frontend
GRAPH config:MainStage {

  # We state that any URI containg /id/ should be considered as a non-information resource. 303 redirection is required.
  # Redirect URL's that contain /id/ to URL's that have this replaced by /doc/

  # Old syntax
  # Double escaping of \\ is needed, because turtle uses a backslash as escape character as well.
  config:NonInformationResourceRedirectionOLD a elmo:Redirection;
    elmo:urlPattern "^(.+)\\/id\\/(.+)$";
    elmo:redirectTemplate "$1\\/doc\\/$2";
  .
  
  # New syntax (using JAX-RS format)
  config:NonInformationResourceRedirection a elmo:Redirection;
    elmo:urlPattern "{path}/id/{reference}";
    elmo:redirectTemplate "{path}/doc/{reference}";
  .

  # A ParameterMapper maps "something" to a parameter or another parametermapper (chaining)
  # An UriParameterMapper maps the original URL to the config:SubjectParameter
  # Target might also be another valuemapper, so you can chain ValueMappers
  # Pattern and Template are optional, without these, target will get the value of source
  #
  # JAX-RS path templating is used for the pattern and template.
  # JAX-RS uri templating uses regex as follows: "{path}/id/{reference}" is equal to {path:[^/]+?}/id/{reference:[^/]+?}
  # this means that a {..} doesn't match just any character, for this you must use something like {path:.+}
  # See also: https://docs.oracle.com/cd/E19798-01/821-1841/ginpw
  #
  # In this case {domain} is not mapped, so the same URI's will be generated for O, T, A and P
  config:SubjectFromUrl a elmo:UriParameterMapper;
    elmo:source http:requestURI;
    elmo:pattern "http://{domain}/{path}/doc/{reference}";
    elmo:template "http://demo.dotwebstack.org/{path}/id/{reference}";
    elmo:target config:SubjectParameter;
  .

  # --- Informal from here, as examples how we could extend the ParameterMapper structure ---
  # Other more specific ParameterMappers might also exist
  config:SubjectFromUrl a elmo:RegexParameterMapper;
    elmo:source http:requestURI;
    elmo:pattern "^(.+)\\/doc\\/(.+)$";
    elmo:template "$1\\/id\\/$2";
    elmo:target config:SubjectParameter;
  .
  # Or even something completely different
  config:HashFromBody a elmo:HashParameterMapper;
    elmo:source http:body;
    elmo:algorithm "base64";
    elmo:target config:HashOfBody;
  .
  # Chaining
  # The elmo:source of chained ParameterMappers is ignored, and may be excluded
  config:ChainedFromUrl a elmo:UriParameterMapper;
    elmo:source http:requestURI;
    elmo:pattern "{path}/doc/{reference}";
    elmo:template "{path}/id/{reference}";
    elmo:target config:HashFromBody;
  .
  # --- Informal till here ---

  # A default representation to be used for any dereferenceable URI's. Two separate representations are needed
  # (A) The representation that matches a /resource path, and uses the ?subject=... query to map to the config:SubjectParameter
  config:ResourceRepresentation a elmo:Representation;
    elmo:urlPattern "/resource";
    # No mapper needed in this case, because query parameters are mapped by default to the corresponding parameters.
    elmo:informationProduct config:ResourceInformationProduct
  .
  # (B) The representation that matches a /doc/ path, and uses the original URL to map to the config:SubjectParameter
  config:ResourceRepresentation a elmo:Representation;
    elmo:urlPattern "/doc/{reference}";
    elmo:parameterMapper config:SubjectFromUrl;
    elmo:informationProduct config:ResourceInformationProduct
  .

}

#Backend

# NB: The use of ?SUBJECT (a bounded variable) is recommended above the use of <${SUBJECT}> (a generic template variable)
#     At this moment, ?SUBJECT only works for string literals, so cannot be used in this case

GRAPH config:MainStage {

  config:SubjectParameter a elmo:TermFilter;
    elmo:name "SUBJECT";
    elmo:shape [
      sh:nodeKind sh:IRI;
    ]
  .
  
  config:ResourceInformationProduct a elmo:InformationProduct;
    elmo:requiredParameter config:SubjectParameter;
    elmo:query '''
      CONSTRUCT {
        <{$SUBJECT}> ?p ?o
      }
      WHERE {
        <{$SUBJECT}> ?p ?o
      }
    ''';
  .
  
}