@prefix elmo: <http://dotwebstack.org/def/elmo#>.
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>.
@prefix dc: <http://purl.org/dc/elements/1.1/>.
@prefix xsd: <http://www.w3.org/2001/XMLSchema#>.
@prefix foaf: <http://xmlns.com/foaf/0.1/>.
@prefix http: <http://www.w3.org/2011/http#>.

@prefix config: <http://dotwebstack.org/configuration/>.

#Frontend
GRAPH config:MainStage {

  # We state that any URI containg /id/ should be considered as a non-information resource. 303 redirection is required.
  # Redirect URL's that contain /id/ to URL's that have this replaced by /doc/
  # Double escaping of \\ is needed, because turtle uses a backslash as escape character as well.
  config:NonInformationResourceRedirection a elmo:Redirection;
    elmo:urlPattern "^(.+)\\/id\\/(.+)$";
    elmo:redirectTemplate "$1\\/doc\\/$2";
  .

  # ======
  # ISSUE (1): How can we determine from the http request which parameters should be input for the information product
  #
  # Current situation:
  # - API component: the OpenAPI spec determines the parameters, with x-dotwebstack-parameter-input the correct parameter is determined
  # - LD component: query parameters are mapped directory to the information product parameters, based on their name
  #
  # The main issue can be separated into two sub issues:
  # - How can we specify that we need the URL (=requestUri from the http request), and not a parameter from the query-part of the URL
  # - How can we transform the URL to a URI (for example: changing /doc/ to /id/)
  #
  # RELATED ISSUE (2): Another issue rises when we combine URL situations with ?subject=... situations
  # The requirement is that people can directory use the URL, but also can use a parameter "subject" (or whatever name)
  #
  # Two options are investigated:
  # Optie-1, uses configuration that is quite similar to the OpenAPI spec. This seems a good solution for simple cases, but doesn't solve the related ISSUE (2)
  # Optie-2, uses a specific SubjectParameter, which is a specialisation of the RequestParameter
  
  # A RequestParameter is similar to the parameter element in a OpenAPI. 
  # A "simple" request parameter as stated below is not necessary, because this is the default behaviour of the LD part
  
  # A RequestMapper that maps the original URL to the config:Subject parameter
  config:SubjectFromUrl a elmo:RequestMapper;
    elmo:headerElement http:requestURI;
    elmo:pattern "^(.+)\\/doc\\/(.+)$";
    elmo:template "$1\\/id\\/$2";
    elmo:targetParameter config:Subject;
  .

  # A RequestMapper that maps the query-parameter "subject" to the config:Subject parameter
  Config:SubjectFromQuery a elmo:RequestMapper;
    elmo:name "subject";
    elmo:headerElement http:params;
    elmo:targetParameter config:Subject;
  .

  # A default representation to be used for any dereferenceable URI's. Two separate representations are needed
  # (A) The representation that matches a /doc/ path, and uses the original URL to map to the config:Subject parameter
  config:ResourceRepresentation a elmo:Representation;
    elmo:urlPattern "\\/resource$";
    elmo:requestMapper config:SubjectFromQuery;
    elmo:informationProduct config:ResourceInformationProduct
  .
  # (B) The representation that matches a /resource path, and uses the ?subject=... query to map to the config:Subject parameter
  config:ResourceRepresentation a elmo:Representation;
    elmo:urlPattern "\\/resource$";
    elmo:requestMapper config:SubjectFromUrl;
    elmo:informationProduct config:ResourceInformationProduct
  .

  # A specific representation to be used for dereferenceable URI's that conform to a specific type
  # OPEN ISSUE: How do we state that this representation "overrides" the representation above? They use the same url patterns!
  #             Possible solution: representations with elmo:appliesTo override representations without elmo:appliesTo. But is this enough?
  # DESIGN CONSIDERATION: urlPattern is still needed, because the dotwebstack framework uses this mechanism to distinguish between API en LD components
  config:ConceptRepresentation a elmo:Representation;
    elmo:urlPattern "\\/resource$";
    elmo:appliesTo [a skos:Concept];
    elmo:requestMapper config:SubjectFromQuery;
    elmo:informationProduct config:ConceptInformationProduct
  .
  config:ConceptRepresentation a elmo:Representation;
    elmo:urlPattern "$1\\/doc\\/$2";
    elmo:appliesTo [a skos:Concept];
    elmo:requestMapper config:SubjectFromUrl;
    elmo:informationProduct config:ConceptInformationProduct
  .
}

#Backend
GRAPH config:MainStage {

  config:Subject a elmo:TermFilter;
    elmo:name "subject";
    elmo:shape [
      sh:nodeKind sh:IRI;
    ]
  .
  
  config:ResourceInformationProduct a elmo:InformationProduct;
    elmo:requiredParameter config:Subject;
    elmo:query '''
      CONSTRUCT {
        {$subject} ?p ?o
      }
      WHERE {
        {$subject} ?p ?o
      }
    ''';
  .
  
  config:ConceptInformationProduct a elmo:InformationProduct;
    elmo:requiredParameter config:Subject;
    elmo:query '''
      CONSTRUCT {
        {$subject} skos:prefLabel ?term.
        {$subject} skos:definition ?definition.
      }
      WHERE {
        {$subject} skos:prefLabel ?term.
        {$subject} skos:definition ?definition.
      }
    ''';
}